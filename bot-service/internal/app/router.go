package app

import (
	"bot/internal/entity"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/sirupsen/logrus"
)

func startsWith(prefix string, content string) bool {
	return (strings.Split(content, " ")[0] == prefix)
}

func CommandRouter(msg *tgbotapi.Message, a *An) {
	state, err := a.Db.GetOrCreateChat(msg.Chat.ID)

	if err != nil {
		log.Println("Failed to get chat  %s", err)
	}

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –≤—ã–≥–ª—è–¥–µ–ª–∞ –±—ã –∫—Ä–∞—Å–∏–≤–µ–π
	if startsWith("/start", msg.Text) {
		// –ø–æ—á–µ–º—É –∑–¥–µ—Å—å –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –Ω–µ—Ç?
		go StartCommand(a.Bot, msg)
	} else if msg.Text == BUTTON_START_NEW_ORDER {
		if !state.HaveUserName() {
			InputName(a.Bot, a.Db, state)
			return
		}

		if !state.HaveUserPhone() {
			InputPhone(a.Bot, a.Db, state)
			return
		}

		DisplayMenuRootMenu(a, state)

	} else if msg.Text == DISPLAY_MENU_BUTTON {
		DisplayMenuRootMenu(a, state)
		// –ø–æ—á–µ–º—É –≥–¥–µ-—Ç–æ –µ—Å—Ç—å `return`, –∞ –≥–¥–µ-—Ç–æ - –Ω–µ—Ç?
		// –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã
	} else if startsWith("üõí", msg.Text) {
		DisplayOrder(a, state)
		return

	} else if msg.Text == SEND_ORDER_BUTTON {
		order := state.GetOrder()
		order.Contacts.Phone = state.PhoneUser
		order.Comment = "–æ—Ç " + state.NameUser
		result, err := PostOrder(a, order)
		if err != nil {
			log.Println("post order: error ", err)
			// –µ—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É, —Ç–æ –∑–∞—á–µ–º –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ?
			// –±–æ–ª–µ–µ —Ç–æ–≥–æ, –∏–Ω–æ–≥–¥–∞ –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏ –æ—à–∏–±–∫—É. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω
			// –ø–æ–Ω—Ç—è–Ω–æ, —á—Ç–æ —Ç—É—Ç –º–µ—Ç–æ–¥ –í–∞—à –∏ –í–∞—à–∞ –ª–æ–≥–∏–∫–∞, –Ω–æ —è –±—ã —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–ª
			// –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å—Ç–æ–∏—Ç
		}

		if result != nil {
			log.Print(result)

			state.OrderStr = ""
			state.ChatState = entity.STATE_PREPARE_ORDER
			a.Db.UpdateChat(state)

			msg := tgbotapi.NewMessage(state.ChatId, "–û–∂–∏–¥–∞–π—Ç–µ, –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è, –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")
			msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton(BUTTON_START_NEW_ORDER),
				))
			Respond(a.Bot, msg)
			return
		}

	} else if msg.Text == CLEAR_ORDER_BUTTON {

		state.NewOrder()
		a.Db.UpdateChat(state)
		msg := tgbotapi.NewMessage(state.ChatId, "–ó–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω")
		msg.ReplyMarkup = makeOrderKeyboard("0")
		Respond(a.Bot, msg)

		DisplayMenu(a, state, "")

	} else if msg.Text == BACK_ORDER_BUTTON {
		DisplayMenuRootMenu(a, state)
	} else {
		if state.ChatState == entity.INPUT_NAME {

			if !state.IsCorrectName(msg.Text) {
				msg := tgbotapi.NewMessage(state.ChatId, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
				Respond(a.Bot, msg)
				return
			}

			state.NameUser = msg.Text
			InputPhone(a.Bot, a.Db, state)
			return
		}

		if state.ChatState == entity.INPUT_PHONE {

			if !state.IsCorrectPhone(msg.Text) {
				msg := tgbotapi.NewMessage(state.ChatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
				Respond(a.Bot, msg)
				return
			}

			state.PhoneUser = msg.Text
			DisplayMenu(a, state, "")
			return
		}
		// echo command
		//Respond(a.Bot, tgbotapi.NewMessage(state.ChatId, msg.Text))
	}
}

func ProcessKeyboardInput(data *UserCommand, chatId int64, a *An) {
	state, err := a.Db.GetOrCreateChat(chatId)
	if err != nil {
		// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–∂–µ —Å—Ç–æ–∏—Ç —á—Ç–æ-—Ç–æ —Å–æ–æ–±—â–∏—Ç—å
		log.Println("Failed to get chat  %s", err)
		return
	}

	switch data.Command {
	case CLICK_ON_POSITION:
		{
			menuItem, _ := a.Db.GetMenu(data.Uuid)
			if menuItem != nil && menuItem.Group {
				DisplayMenu(a, state, data.Uuid)
				return
			}
			if menuItem != nil && !menuItem.Group {
				DisplayMenuItem(a, state, menuItem)
				return
			}
		}

	case ADD_POSITION:
		{
			menuItem, _ := a.Db.GetMenu(data.Uuid)
			if menuItem != nil && !menuItem.Group {
				addPositionToOrder(a, state, menuItem)
				DisplayMenuItem(a, state, menuItem)
				return
			}
		}

	case DECREASE_POSITION:
		{
			menuItem, _ := a.Db.GetMenu(data.Uuid)
			if menuItem != nil && !menuItem.Group {
				deletePositionFromOrder(a, state, menuItem)
				DisplayMenuItem(a, state, menuItem)
				return
			}
		}
	}
}

func addPositionToOrder(a *An, state *entity.Chat, item *entity.MenuItemDatabase) {
	order := state.GetOrder()
	order.AddMenuItem(item)

	var msgText = "–í –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è " + item.Name + " " + item.PriceString()
	state.OrderStr = order.ToJson()
	a.Db.UpdateChat(state)

	msg := tgbotapi.NewMessage(state.ChatId, msgText)
	msg.ReplyMarkup = makeOrderKeyboard(order.CountPosition())
	Respond(a.Bot, msg)
}

func deletePositionFromOrder(a *An, state *entity.Chat, item *entity.MenuItemDatabase) {
	order := state.GetOrder()
	order.DecreaseMenuItem(item)

	var msgText = "—É–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è " + item.Name + " " + item.PriceString()
	state.OrderStr = order.ToJson()
	a.Db.UpdateChat(state)

	msg := tgbotapi.NewMessage(state.ChatId, msgText)
	msg.ReplyMarkup = makeOrderKeyboard(order.CountPosition())
	Respond(a.Bot, msg)
}

// –ø–æ—á–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è `interface{}`, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø?
// –∏ —è –±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π, –∞ –≤–µ—Å—å –∑–∞–∫–∞–∑ - —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏ —Å—É–º–º—É, —á—Ç–æ –¥–∞–∂–µ –ø–æ–ª–µ–∑–Ω–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
func makeOrderKeyboard(count string) interface{} {
	var textBucket = "üõí  –ö–æ—Ä–∑–∏–Ω–∞ (" + count + ")"

	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(DISPLAY_MENU_BUTTON),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(textBucket),
		),
	)
}
